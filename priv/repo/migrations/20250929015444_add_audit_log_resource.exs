# SPDX-FileCopyrightText: 2022 Alembic Pty Ltd
#
# SPDX-License-Identifier: MIT

defmodule Example.Repo.Migrations.AddAuditLogResource do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:audit_logs, primary_key: false) do
      add(:resource, :text, null: false)
      add(:extra_data, :map, null: false, default: %{})
      add(:status, :text, null: false)
      add(:event_name, :text, null: false)

      add(:logged_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:strategy, :text, null: false)
      add(:subject, :text, null: false)
      add(:id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true)
    end

    create table(:audit_logged_users, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:email, :citext, null: false)
      add(:hashed_password, :text)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create unique_index(:audit_logged_users, [:email],
             name: "audit_logged_users_unique_email_index"
           )
  end

  def down do
    drop_if_exists(
      unique_index(:audit_logged_users, [:email], name: "audit_logged_users_unique_email_index")
    )

    drop(table(:audit_logged_users))

    drop(table(:audit_logs))
  end
end
