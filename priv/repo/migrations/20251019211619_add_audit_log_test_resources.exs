# SPDX-FileCopyrightText: 2022 Alembic Pty Ltd
#
# SPDX-License-Identifier: MIT

defmodule Example.Repo.Migrations.AddAuditLogTestResources do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:users_with_wildcard_and_exclusions, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:email, :citext, null: false)
      add(:hashed_password, :text)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create unique_index(:users_with_wildcard_and_exclusions, [:email],
             name: "users_with_wildcard_and_exclusions_unique_email_index"
           )

    create table(:users_with_selective_strategy_includes, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:email, :citext, null: false)
      add(:hashed_password, :text)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create unique_index(:users_with_selective_strategy_includes, [:email],
             name: "users_with_selective_strategy_includes_unique_email_index"
           )

    create table(:users_with_explicit_includes, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:email, :citext, null: false)
      add(:hashed_password, :text)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create unique_index(:users_with_explicit_includes, [:email],
             name: "users_with_explicit_includes_unique_email_index"
           )

    create table(:users_with_empty_includes, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("gen_random_uuid()"), primary_key: true)
      add(:email, :citext, null: false)
      add(:hashed_password, :text)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )
    end

    create unique_index(:users_with_empty_includes, [:email],
             name: "users_with_empty_includes_unique_email_index"
           )
  end

  def down do
    drop_if_exists(
      unique_index(:users_with_empty_includes, [:email],
        name: "users_with_empty_includes_unique_email_index"
      )
    )

    drop(table(:users_with_empty_includes))

    drop_if_exists(
      unique_index(:users_with_explicit_includes, [:email],
        name: "users_with_explicit_includes_unique_email_index"
      )
    )

    drop(table(:users_with_explicit_includes))

    drop_if_exists(
      unique_index(:users_with_selective_strategy_includes, [:email],
        name: "users_with_selective_strategy_includes_unique_email_index"
      )
    )

    drop(table(:users_with_selective_strategy_includes))

    drop_if_exists(
      unique_index(:users_with_wildcard_and_exclusions, [:email],
        name: "users_with_wildcard_and_exclusions_unique_email_index"
      )
    )

    drop(table(:users_with_wildcard_and_exclusions))
  end
end
