defmodule AshAuthentication.Strategy.Password.HashPasswordChange do
  @moduledoc """
  Set the hash based on the password input.

  Uses the configured `AshAuthentication.HashProvider` to generate a hash of the
  user's password input and store it in the changeset.

  You can use this change in your actions where you want to change the user's
  password.  If you're not using one of the actions generated by the password
  strategy then you'll need to manually pass the strategy name in the changeset
  context.  Eg:

  ```elixir
  Changeset.new(user, %{})
  |> Changeset.set_context(%{strategy_name: :password})
  |> Changeset.for_update(:update, params)
  |> Accounts.update()
  ```

  or by adding it statically to your action definition:

  ```elixir
  update :change_password do
    change set_context(%{strategy_name: :password})
    change AshAuthentication.Strategy.Password.HashPasswordChange
  end
  ```

  or by adding it as an option to the change definition:

  ```elixir
  update :change_password do
    change {AshAuthentication.Strategy.Password.HashPasswordChange, strategy_name: :password}
  end
  ```
  """

  use Ash.Resource.Change
  alias Ash.{Changeset, Error.Framework.AssumptionFailed, Resource.Change}
  alias AshAuthentication.Info

  @doc false
  @impl true
  @spec change(Changeset.t(), keyword, Change.context()) :: Changeset.t()
  def change(changeset, options, context) do
    changeset
    |> Changeset.before_action(fn changeset ->
      with {:ok, strategy} <- Info.find_strategy(changeset, context, options),
           value when is_binary(value) <-
             Changeset.get_argument(changeset, strategy.password_field),
           {:ok, hash} <- strategy.hash_provider.hash(value) do
        Changeset.change_attribute(changeset, strategy.hashed_password_field, hash)
      else
        :error ->
          raise AssumptionFailed, message: "Error hashing password."

        _ ->
          changeset
      end
    end)
  end
end
