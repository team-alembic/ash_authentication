defmodule AshAuthentication.Strategy.Password.PasswordConfirmationValidation do
  @moduledoc """
  Validate that the password and password confirmation match.

  This check is only performed when the `confirmation_required?` DSL option is
  set to `true`.

  You can use this validation in your own actions where you want to validate
  that the password and the password confirmation arguments match.  If you're
  not using one of the actions generated by the password strategy then you'll
  need to manually pass the strategy name in the changeset context.  Eg:

  ```elixir
  Changeset.new(user, %{})
  |> Changeset.set_context(%{strategy_name: :password})
  |> Changeset.for_update(:change_password, params)
  |> Accounts.update()
  ```

  or by adding it statically in your action definition:

  ```elixir
  update :change_password do
    change set_context(%{strategy_name: :password})
    change AshAuthentication.Strategy.Password.HashPasswordChange
  end
  ```
  """

  use Ash.Resource.Validation
  alias Ash.{Changeset, Error.Changes.InvalidArgument, Error.Framework.AssumptionFailed}
  alias AshAuthentication.Info

  @doc """
  Validates that the password and password confirmation fields contain
  equivalent values - if confirmation is required.
  """
  @impl true
  @spec validate(Changeset.t(), keyword) :: :ok | {:error, String.t() | Exception.t()}
  def validate(changeset, options) do
    case find_strategy(changeset, options) do
      {:ok, %{confirmation_required?: true} = strategy} ->
        validate_password_confirmation(changeset, strategy)

      {:ok, _} ->
        :ok

      :error ->
        {:error,
         AssumptionFailed.exception(
           message: "Action does not correlate with an authentication strategy"
         )}
    end
  end

  defp validate_password_confirmation(changeset, strategy) do
    password = Changeset.get_argument(changeset, strategy.password_field)
    confirmation = Changeset.get_argument(changeset, strategy.password_confirmation_field)

    if password == confirmation do
      :ok
    else
      {:error,
       InvalidArgument.exception(
         field: strategy.password_confirmation_field,
         message: "does not match"
       )}
    end
  end

  defp find_strategy(changeset, options) do
    with :error <- Info.strategy_for_action(changeset.resource, changeset.action.name),
         :error <- Map.fetch(changeset.context, :strategy_name),
         :error <- Keyword.fetch(options, :strategy_name) do
      :error
    else
      {:ok, strategy_name} when is_atom(strategy_name) ->
        Info.strategy(changeset.resource, strategy_name)

      {:ok, strategy} ->
        {:ok, strategy}
    end
  end
end
